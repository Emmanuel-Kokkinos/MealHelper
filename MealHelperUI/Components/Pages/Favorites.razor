@page "/favorites"
@rendermode @(new InteractiveServerRenderMode(false))

@using MealHelperData;
@using MealHelperData.Models;
@using Newtonsoft.Json.Linq

@inject IMealData _db;

<h1>Favorites</h1>

<h4>Current Favorites</h4>

@if (!favoriteMeals.Any())
{
    <p><em>Loading...</em></p>
}
else
{
    <div id="container">
        @foreach (var favMeal in favoriteMeals)
        {
            <MealCard mealName=@favMeal.name mealImage=@favMeal.image mealId="@favMeal.mealId" />
        }
    </div>
}

@code {
    private static readonly HttpClient HttpClient = new HttpClient();
    private List<MealModel> dbMeals = new List<MealModel>();
    private bool getDataError;
    private List<Meal> favoriteMeals = new List<Meal>();

    public class Meal
    {
        public string name { get; set; }
        public string image { get; set; }
        public string mealId { get; set; }

        public Meal(string name, string image, string mealId)
        {
            this.name = name;
            this.image = image;
            this.mealId = mealId;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        dbMeals = await _db.GetFavoriteMeals();
        await SetMealList();
    }

    public async Task SetMealList()
    {
        foreach(MealModel dbMeal in dbMeals)
        {
            await FindMealInfo(dbMeal.MealId);
        }
    }

    public async Task FindMealInfo(int mealId)
    {
        string apiUrl = "https://www.themealdb.com/api/json/v1/1/lookup.php?i=" + mealId;
        try
        {
            using (HttpResponseMessage res = await HttpClient.GetAsync(apiUrl))
            {
                using (HttpContent content = res.Content)
                {
                    var jsonData = await content.ReadAsStringAsync();

                    if (jsonData != null)
                    {
                        JObject parsedData = JObject.Parse(jsonData);

                        foreach (var data in parsedData["meals"])
                        {
                            favoriteMeals.Add(new Meal(
                                (string)data["strMeal"],
                                (string)data["strMealThumb"],
                                (string)data["idMeal"]
                            ));
                        }
                    }
                    else
                    {
                        getDataError = true;
                        Console.WriteLine("No Data Found");
                    }
                }
            }
        }
        catch (Exception exception)
        {
            getDataError = true;
            Console.WriteLine("Exception Hit");
            Console.Write(exception);
        }
    }
}
