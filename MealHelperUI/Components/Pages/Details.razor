@page "/details/{mealId}"
@using Newtonsoft.Json.Linq
@rendermode @(new InteractiveServerRenderMode(false))

@if (mealId is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h1>@name</h1>
    <p>Type: @foodLocation</p>
    <div id="instructionsBox">
        @for (int i = 0; i < cookingInstructions.Count - 1; i++)
        {
            <li>@cookingInstructions[i].</li>
        }
    </div>
    <div id="container">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th scope="col">Ingredient</th>
                    <th scope="col">Measurement</th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < ingredients.Count; i++)
                {
                    <tr>
                        <td>@ingredients[i]</td>
                        @if (@measurements.ElementAtOrDefault(i) is not null)
                        {
                           <td>@measurements[i]</td> 
                        }
                    </tr>
                }
            </tbody>
        </table>
        <div id="imageBox">
            <img src="@image" />
        </div>
    </div>
}

@code {
    private bool getDataError;
    [Parameter]
    public string mealId { get; set; }
    private string? name;
    private string? foodLocation;
    private string? image;
    private List<string>? cookingInstructions = new List<string>();
    private List<string>? ingredients = new List<string>();
    private List<string>? measurements = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        string apiUrl = "https://www.themealdb.com/api/json/v1/1/lookup.php?i=" + mealId;
        await LoadMealInfo(apiUrl);
    }

    public async Task LoadMealInfo(string apiUrl)
    {
        string baseUrl = apiUrl;
        try
        {
            using (HttpClient client = new HttpClient())
            {
                using (HttpResponseMessage res = await client.GetAsync(baseUrl))
                {
                    using (HttpContent content = res.Content)
                    {
                        var jsonData = await content.ReadAsStringAsync();

                        if (jsonData != null)
                        {
                            JObject parsedData = JObject.Parse(jsonData);

                            foreach (var data in parsedData["meals"])
                            {
                                name = (string)data["strMeal"];
                                foodLocation = (string)data["strArea"];
                                image = (string)data["strMealThumb"];
                                var instructions = (string)data["strInstructions"];
                                cookingInstructions = instructions.Split(".").ToList();

                                for(int i = 1; i <= 20; i++)
                                {
                                    ingredients.Add((string)data["strIngredient" + i]);
                                }
                                for (int i = 1; i <= 20; i++)
                                {
                                    measurements.Add((string)data["strMeasure" + i]);
                                }
                            }

                            ingredients = ingredients.Where(s => !string.IsNullOrWhiteSpace(s)).ToList();
                            measurements = measurements.Where(s => !string.IsNullOrWhiteSpace(s)).ToList();
                        }
                        else
                        {
                            getDataError = true;
                            Console.WriteLine("No Data Found");
                        }
                    }
                }
            }
        }
        catch (Exception exception)
        {
            getDataError = true;
            Console.WriteLine("Exception Hit");
            Console.Write(exception);
        }
    }
}
