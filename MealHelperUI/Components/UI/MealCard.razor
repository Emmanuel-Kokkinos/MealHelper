@using MealHelperData;
@using MealHelperData.Models;
@using Newtonsoft.Json.Linq

@inject IMealData _db;
@inject IIngredientData _ingredientDb;

<div id="container">
    <div class="card m-4">
        <a href="details/@mealId"><img class="card-img-top" src="@mealImage"></a>
        <div class="card-body">
            <h3 class="card-title">@mealName</h3>
            <button class="btn btn-primary listButton" @onclick="@AddToShoppingList">Add to List</button>
            <button class="btn btn-primary favoriteButton" @onclick="@(favorited ? @RemoveFromFavorites : @AddToFavorites)">
                <Blazorise.Icon Name="@(favorited ? IconName.TimesCircle : IconName.Heart)" />
            </button>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string mealName { get; set; } 
    [Parameter]
    public string mealImage { get; set; }
    [Parameter]
    public string mealId { get; set; }
    private List<string>? ingredients = new List<string>();
    private List<string>? measurements = new List<string>();
    private bool getDataError;
    private bool favorited;

    protected override async Task OnInitializedAsync()
    {
        MealModel meal = new MealModel
            {
                MealId = Int32.Parse(mealId),
            };

        List<MealModel> favorites = await _db.CheckFavorite(meal);

        if (favorites.Any())
        {
            favorited = favorites[0].Favorite;
        }
        else
        {
            favorited = false;
        }

        GetData(meal);
    }

    public async Task GetData(MealModel meal)
    {
        string apiUrl = "https://www.themealdb.com/api/json/v1/1/lookup.php?i=" + meal.MealId;
        try
        {
            using (HttpClient client = new HttpClient())
            {
                using (HttpResponseMessage res = await client.GetAsync(apiUrl))
                {
                    using (HttpContent content = res.Content)
                    {
                        var jsonData = await content.ReadAsStringAsync();

                        if (jsonData != null)
                        {
                            JObject parsedData = JObject.Parse(jsonData);

                            foreach (var data in parsedData["meals"])
                            {
                                for (int i = 1; i <= 20; i++)
                                {
                                    ingredients.Add((string)data["strIngredient" + i]);
                                    measurements.Add((string)data["strMeasure" + i]);
                                }

                                ingredients = ingredients.Where(s => !string.IsNullOrWhiteSpace(s)).ToList();
                                measurements = measurements.Where(s => !string.IsNullOrWhiteSpace(s)).ToList();
                            }
                        }
                        else
                        {
                            getDataError = true;
                            Console.WriteLine("No Data Found");
                        }
                    }
                }
            }
        }
        catch (Exception exception)
        {
            getDataError = true;
            Console.WriteLine("Exception Hit");
            Console.Write(exception);
        }
    }

    private Task AddToFavorites()
    {
        favorited = true;

        MealModel meal = new MealModel
            {
                MealId = Int32.Parse(mealId),
                Favorite = true,
            };

        _db.UpdateFavoriteMeal(meal);

        return Task.CompletedTask;
    }

    private Task RemoveFromFavorites()
    {
        favorited = false;

        MealModel meal = new MealModel
            {
                MealId = Int32.Parse(mealId),
                Favorite = false,
            };

        _db.UpdateFavoriteMeal(meal);

        return Task.CompletedTask;
    }

    private Task AddToShoppingList()
    {
        for(int i = 0; i < ingredients.Count; i++)
        {
            IngredientModel ingredientsModel = new IngredientModel
                {
                    MealId = Int32.Parse(mealId),
                    MealName = mealName,
                    IngredientName = ingredients.ElementAt(i),
                    IngredientAmount = measurements.ElementAtOrDefault(i)
                };

            _ingredientDb.AddShoppingIngredients(ingredientsModel);
        }

        return Task.CompletedTask;
    }
}
