@page "/search"
@rendermode @(new InteractiveServerRenderMode(false))

@using System.Net.Http;
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq;

<PageTitle>Meal Search</PageTitle>

<h1>Find the right meal for you!</h1>

<div class="mt-xl-3">
    <Select class="dropDown" TValue="string" SelectedValue="@foodCategory" SelectedValueChanged="@ChangeCategory">
        <SelectGroup Label="Meat">
            <SelectItem Value=@("Beef")>Beef</SelectItem>
            <SelectItem Value=@("Chicken")>Chicken</SelectItem>
            <SelectItem Value=@("Goat")>Goat</SelectItem>
            <SelectItem Value=@("Lamb")>Lamb</SelectItem>
            <SelectItem Value=@("Pork")>Pork</SelectItem>
            <SelectItem Value=@("Seafood")>Seafood</SelectItem>
        </SelectGroup>
        <SelectGroup Label="Other">
            <SelectItem Value=@("Breakfast")>Breakfast</SelectItem>
            <SelectItem Value=@("Dessert")>Dessert</SelectItem>
            <SelectItem Value=@("Miscellaneous")>Miscellaneous</SelectItem>
            <SelectItem Value=@("Pasta")>Pasta</SelectItem>
            <SelectItem Value=@("Side")>Side</SelectItem>
            <SelectItem Value=@("Starter")>Starter</SelectItem>
            <SelectItem Value=@("Vegan")>Vegan</SelectItem>
            <SelectItem Value=@("Vegetarian")>Vegetarian</SelectItem>
        </SelectGroup>
    </Select>

    <div class="input-group searchBar">
        <input type="search" class="form-control rounded" placeholder="Search by ingredient" aria-label="Search" 
            aria-describedby="search-addon" @bind-value="@foodIngredient" @onkeydown="@pressEnter" />
        <button class="btn btn-outline-primary" @onclick="@SearchForMeal">Search</button>
    </div>
</div>

@if (getDataError || meals is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div id="container">
        @foreach (Meal meal in meals)
        {
            <MealCard mealName=@meal.name mealImage=@meal.image mealId="@meal.mealId" />
        }
    </div>
}

@code {
    private string? foodCategory = "Beef";
    private string? foodIngredient;
    private bool getDataError;
    private List<Meal> meals = new List<Meal>();

    public class Meal
    {
        public string name { get; set; }
        public string image { get; set; }
        public string mealId { get; set; }

        public Meal(string name, string image, string mealId)
        {
            this.name = name;
            this.image = image;
            this.mealId = mealId;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        string baseUrl = "https://www.themealdb.com/api/json/v1/1/filter.php?c=Beef";
        await LoadAllMeals(baseUrl);
    }

    public async Task ChangeCategory(string foodCategory)
    {
        string apiUrl = "https://www.themealdb.com/api/json/v1/1/filter.php?c=" + foodCategory + "";
        await LoadAllMeals(apiUrl);
    }

    public async Task pressEnter(KeyboardEventArgs e)
    {
        if(e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await SearchForMeal();
        }
    }

    public async Task SearchForMeal()
    {
        string apiUrl = "https://www.themealdb.com/api/json/v1/1/filter.php?i=" + foodIngredient + "";
        await LoadAllMeals(apiUrl);
    }

    public async Task LoadAllMeals(string apiUrl)
    {
        meals.Clear();
        string baseUrl = apiUrl;
        try
        {
            using (HttpClient client = new HttpClient())
            {
                using (HttpResponseMessage res = await client.GetAsync(baseUrl))
                {
                    using (HttpContent content = res.Content)
                    {
                        var jsonData = await content.ReadAsStringAsync();

                        if (jsonData != null)
                        {
                            JObject parsedData = JObject.Parse(jsonData);

                            foreach (var data in parsedData["meals"])
                            {
                                meals.Add(new Meal(
                                    (string)data["strMeal"],
                                    (string)data["strMealThumb"],
                                    (string)data["idMeal"]
                                ));
                            }
                        }
                        else
                        {
                            getDataError = true;
                            Console.WriteLine("No Data Found");
                        }
                    }
                }
            }
        }
        catch (Exception exception)
        {
            getDataError = true;
            Console.WriteLine("Exception Hit");
            Console.Write(exception);
        }
    }
}
